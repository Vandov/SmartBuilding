import jason.asSyntax.*;
import jason.environment.Environment;
import jason.environment.grid.GridWorldModel;
import jason.environment.grid.GridWorldView;
import jason.environment.grid.Location;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.Random;
import java.util.logging.Logger;


public class Building extends Environment {

	public static final int INJURED  = 16;

	public static final int GSize=10;
	private BuildingModel model;
    private BuildingView  view;
	
	public static final Term    s1 = Literal.parseLiteral("next(security_1)");
	public static final Term    s2 = Literal.parseLiteral("next(security_2)");
	
    private Logger logger = Logger.getLogger("SmartBuilding.mas2j."+Building.class.getName());

    /** Called before the MAS execution with the args informed in .mas2j */

    @Override

    public void init(String[] args) {
        super.init(args);
		model = new BuildingModel();
		view = new BuildingView(model);
		model.setView(view);
		//updatePercepts();
    }
	
    @Override
    public boolean executeAction(String agName, Structure action) {

        logger.info("executing: "+action+", but not implemented!");
		
		try {
            if (action.equals(s1)) {
                model.nextSlot(1);
            }else if (action.equals(s2)){
				model.nextSlot(2);
			}else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
		
		updatePercepts();

        try {
            Thread.sleep(1000);
        } catch (Exception e) {}
        informAgsEnvironmentChanged();
        return true;
    }
	
	void updatePercepts() {
        clearPercepts();
        
        Location r1Loc = model.getAgPos(0);
        Location r2Loc = model.getAgPos(1);
		Location r3Loc = model.getAgPos(2);
        Location r4Loc = model.getAgPos(3);
		Location r5Loc = model.getAgPos(4);
        Location r6Loc = model.getAgPos(5);
        
        Literal pos1 = Literal.parseLiteral("pos(r1," + r1Loc.x + "," + r1Loc.y + ")");
        Literal pos2 = Literal.parseLiteral("pos(r2," + r2Loc.x + "," + r2Loc.y + ")");
		Literal pos3 = Literal.parseLiteral("pos(r3," + r3Loc.x + "," + r3Loc.y + ")");
        Literal pos4 = Literal.parseLiteral("pos(r4," + r4Loc.x + "," + r4Loc.y + ")");
		Literal pos5 = Literal.parseLiteral("pos(r5," + r5Loc.x + "," + r5Loc.y + ")");
        Literal pos6 = Literal.parseLiteral("pos(r6," + r6Loc.x + "," + r6Loc.y + ")");

        addPercept(pos1);
        addPercept(pos2);
		addPercept(pos3);
        addPercept(pos4);
		addPercept(pos5);
        addPercept(pos6);
    }

    /** Called before the end of MAS execution */

    @Override
    public void stop() {
        super.stop();
    }
	
	class BuildingModel extends GridWorldModel {

        private BuildingModel() {
			// Size of the map, num of agents to display
            super(GSize, GSize, 6);
			
			try {
				// Agent with ID 0, and pos(0,0)
				// Doorman
                setAgPos(0, 4, 9);
				// Security
                setAgPos(1, 2, 2);
				setAgPos(2, 7, 7);
				// Paramedic
				setAgPos(3, 9, 0);
				setAgPos(4, 9, 1);
				setAgPos(5, 9, 2);
				// Injured
				setAgPos(INJURED, 5, 5);
				setAgPos(INJURED, 6, 4);
            } catch (Exception e) {
                e.printStackTrace();
            }
		}
		
		void nextSlot(int securityID) throws Exception {
			Location s2;
			if(securityID == 1){
				s2 = getAgPos(1);
			}else {
				s2 = getAgPos(2);
			}
			if(s2.x != 2 && s2.y == getHeight()-3){ // bottom side
				s2.x--;
			}else if (s2.x == getWidth()-3 && s2.y != getHeight()-3) { // right side
                s2.y++;
            }else if (s2.x == 2 && s2.y != 2){ // left side 
				s2.y--;
			}else if(s2.x != getWidth()-3 && s2.y == 2){ // top side
				s2.x++;
			}else{
				return;
			}
			if(securityID ==1){
				setAgPos(1, s2);
				setAgPos(1, getAgPos(1)); // just to draw it in the view
			} else {
				setAgPos(2, s2);
				setAgPos(2, getAgPos(2)); // just to draw it in the view
			}
			setAgPos(0, getAgPos(0));
			setAgPos(3, getAgPos(3));
			setAgPos(4, getAgPos(4));
			setAgPos(5, getAgPos(5));
		}
		
    }
	
	class BuildingView extends GridWorldView {

        public BuildingView(BuildingModel model) {
            super(model, "Smart Building", 600);
            defaultFont = new Font("Arial", Font.BOLD, 18); // change default font
            setVisible(true);
            repaint();
        }

        /** draw application objects */
        @Override
        public void draw(Graphics g, int x, int y, int object) {
            switch (object) {
                case Building.INJURED: drawInjured(g, x, y);  break;
            }
        }

        @Override
        public void drawAgent(Graphics g, int x, int y, Color c, int id) {
			String label;
			switch(id){
				case 0: label="D"; break;
				case 1: label="S"; break;
				case 2: label="S"; break;
				default: label="P"; break;
			}
			label=label+(id+1);
			c = Color.blue;
            if (id == 0) {
                c = Color.yellow;
                /*if (((MarsModel)model).r1HasGarb) {
                    label += " - G";
                    c = Color.orange;
                }*/
            }
			if (id == 3 || id ==4 || id == 5) {
                c = Color.red;
                /*if (((MarsModel)model).r1HasGarb) {
                    label += " - G";
                    c = Color.orange;
                }*/
            }
			super.drawAgent(g, x, y, c, -1);
           /* if (id == 0) { 
                g.setColor(Color.black);
            } else if (id == 1) {
                g.setColor(Color.white);                
            }*/
			g.setColor(Color.black);
            super.drawString(g, x, y, defaultFont, label);
            repaint();
        }

		public void drawInjured(Graphics g, int x, int y) {
            super.drawObstacle(g, x, y);
            g.setColor(Color.gray);
            drawString(g, x, y, defaultFont, "I");
        }
    }
}


